// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String?  @unique
  password  String?
  phone     String?  
  address   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts                 ContentBlock[] @relation("AuthorContentBlocks")
  updatedContentBlocks  ContentBlock[] @relation("UpdatedContentBlocks")
  newsPosts           NewsPost[]
  updatedNewsPosts     NewsPost[]     @relation("UpdatedNewsPosts")
}


model ContentBlock {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique
  title       String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    String?  @db.ObjectId
  author      User?    @relation("AuthorContentBlocks", fields: [authorId], references: [id], onDelete: Cascade)

  updatedById String?  @db.ObjectId
  updatedBy   User?    @relation("UpdatedContentBlocks", fields: [updatedById], references: [id])
}

model NewsPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique
  title       String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String?  @db.ObjectId
  author      User?    @relation(fields: [authorId], references: [id]) 
  updatedById String?  @db.ObjectId
  updatedBy   User?    @relation("UpdatedNewsPosts", fields: [updatedById], references: [id])
}

model Navigation {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  category String
  label   String
  href    String @unique
}

enum boardPosition{
  ORDFÖRANDE
  SEKRETERARE
  KASSÖR
  SUPPLEANT
}

model BoardMembers {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  position boardPosition
  phone   String
  email    String
  image    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}